{"version":3,"file":"withSentryServerSideGetInitialProps.js","sources":["../../../../src/config/wrappers/withSentryServerSideGetInitialProps.ts"],"sourcesContent":["import { hasTracingEnabled } from '@sentry/tracing';\nimport { dynamicSamplingContextToSentryBaggageHeader } from '@sentry/utils';\nimport { NextPage } from 'next';\n\nimport { isBuild } from '../../utils/isBuild';\nimport { callTracedServerSideDataFetcher, getTransactionFromRequest, withErrorInstrumentation } from './wrapperUtils';\n\ntype GetInitialProps = Required<NextPage>['getInitialProps'];\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function\n *\n * @param origGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nexport function withSentryServerSideGetInitialProps(origGetInitialProps: GetInitialProps): GetInitialProps {\n  return async function (\n    ...getInitialPropsArguments: Parameters<GetInitialProps>\n  ): Promise<ReturnType<GetInitialProps>> {\n    if (isBuild()) {\n      return origGetInitialProps(...getInitialPropsArguments);\n    }\n\n    const [context] = getInitialPropsArguments;\n    const { req, res } = context;\n\n    const errorWrappedGetInitialProps = withErrorInstrumentation(origGetInitialProps);\n\n    // Generally we can assume that `req` and `res` are always defined on the server:\n    // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n    // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n    // span with each other when there are no req or res objects, we simply do not trace them at all here.\n    if (hasTracingEnabled() && req && res) {\n      const initialProps: {\n        _sentryTraceData?: string;\n        _sentryBaggage?: string;\n      } = await callTracedServerSideDataFetcher(errorWrappedGetInitialProps, getInitialPropsArguments, req, res, {\n        dataFetcherRouteName: context.pathname,\n        requestedRouteName: context.pathname,\n        dataFetchingMethodName: 'getInitialProps',\n      });\n\n      const requestTransaction = getTransactionFromRequest(req);\n      if (requestTransaction) {\n        initialProps._sentryTraceData = requestTransaction.toTraceparent();\n\n        const dynamicSamplingContext = requestTransaction.getDynamicSamplingContext();\n        initialProps._sentryBaggage = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n      }\n\n      return initialProps;\n    } else {\n      return errorWrappedGetInitialProps(...getInitialPropsArguments);\n    }\n  };\n}\n"],"names":[],"mappings":";;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;"}