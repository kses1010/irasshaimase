Object.defineProperty(exports, '__esModule', { value: true });

var tracing = require('@sentry/tracing');
var isBuild = require('../../utils/isBuild.js');
var wrapperUtils = require('./wrapperUtils.js');

/**
 * Create a wrapped version of the user's exported `getInitialProps` function in
 * a custom document ("_document.js").
 *
 * @param origDocumentGetInitialProps The user's `getInitialProps` function
 * @param parameterizedRoute The page's parameterized route
 * @returns A wrapped version of the function
 */
function withSentryServerSideDocumentGetInitialProps(
  origDocumentGetInitialProps,
) {
  return async function (
    ...documentGetInitialPropsArguments
  ) {
    if (isBuild.isBuild()) {
      return origDocumentGetInitialProps(...documentGetInitialPropsArguments);
    }

    const [context] = documentGetInitialPropsArguments;
    const { req, res } = context;

    var errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(origDocumentGetInitialProps);

    // Generally we can assume that `req` and `res` are always defined on the server:
    // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object
    // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher
    // span with each other when there are no req or res objects, we simply do not trace them at all here.
    if (tracing.hasTracingEnabled() && req && res) {
      return wrapperUtils.callTracedServerSideDataFetcher(errorWrappedGetInitialProps, documentGetInitialPropsArguments, req, res, {
        dataFetcherRouteName: '/_document',
        requestedRouteName: context.pathname,
        dataFetchingMethodName: 'getInitialProps',
      });
    } else {
      return errorWrappedGetInitialProps(...documentGetInitialPropsArguments);
    }
  };
}

exports.withSentryServerSideDocumentGetInitialProps = withSentryServerSideDocumentGetInitialProps;
//# sourceMappingURL=withSentryServerSideDocumentGetInitialProps.js.map
