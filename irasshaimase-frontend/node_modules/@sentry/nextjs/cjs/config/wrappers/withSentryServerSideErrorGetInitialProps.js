Object.defineProperty(exports, '__esModule', { value: true });

var tracing = require('@sentry/tracing');
var utils = require('@sentry/utils');
var isBuild = require('../../utils/isBuild.js');
var wrapperUtils = require('./wrapperUtils.js');

/**
 * Create a wrapped version of the user's exported `getInitialProps` function in
 * a custom error page ("_error.js").
 *
 * @param origErrorGetInitialProps The user's `getInitialProps` function
 * @param parameterizedRoute The page's parameterized route
 * @returns A wrapped version of the function
 */
function withSentryServerSideErrorGetInitialProps(
  origErrorGetInitialProps,
) {
  return async function (
    ...errorGetInitialPropsArguments
  ) {
    if (isBuild.isBuild()) {
      return origErrorGetInitialProps(...errorGetInitialPropsArguments);
    }

    const [context] = errorGetInitialPropsArguments;
    const { req, res } = context;

    var errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(origErrorGetInitialProps);

    // Generally we can assume that `req` and `res` are always defined on the server:
    // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object
    // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher
    // span with each other when there are no req or res objects, we simply do not trace them at all here.
    if (tracing.hasTracingEnabled() && req && res) {
      var errorGetInitialProps

 = await wrapperUtils.callTracedServerSideDataFetcher(errorWrappedGetInitialProps, errorGetInitialPropsArguments, req, res, {
        dataFetcherRouteName: '/_error',
        requestedRouteName: context.pathname,
        dataFetchingMethodName: 'getInitialProps',
      });

      var requestTransaction = wrapperUtils.getTransactionFromRequest(req);
      if (requestTransaction) {
        errorGetInitialProps._sentryTraceData = requestTransaction.toTraceparent();

        var dynamicSamplingContext = requestTransaction.getDynamicSamplingContext();
        errorGetInitialProps._sentryBaggage = utils.dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);
      }

      return errorGetInitialProps;
    } else {
      return errorWrappedGetInitialProps(...errorGetInitialPropsArguments);
    }
  };
}

exports.withSentryServerSideErrorGetInitialProps = withSentryServerSideErrorGetInitialProps;
//# sourceMappingURL=withSentryServerSideErrorGetInitialProps.js.map
