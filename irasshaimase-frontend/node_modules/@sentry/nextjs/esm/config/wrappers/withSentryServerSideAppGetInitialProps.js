import { hasTracingEnabled } from '@sentry/tracing';
import { dynamicSamplingContextToSentryBaggageHeader } from '@sentry/utils';
import { isBuild } from '../../utils/isBuild.js';
import { withErrorInstrumentation, callTracedServerSideDataFetcher, getTransactionFromRequest } from './wrapperUtils.js';

/**
 * Create a wrapped version of the user's exported `getInitialProps` function in
 * a custom app ("_app.js").
 *
 * @param origAppGetInitialProps The user's `getInitialProps` function
 * @param parameterizedRoute The page's parameterized route
 * @returns A wrapped version of the function
 */
function withSentryServerSideAppGetInitialProps(origAppGetInitialProps) {
  return async function (
    ...appGetInitialPropsArguments
  ) {
    if (isBuild()) {
      return origAppGetInitialProps(...appGetInitialPropsArguments);
    }

    const [context] = appGetInitialPropsArguments;
    const { req, res } = context.ctx;

    var errorWrappedAppGetInitialProps = withErrorInstrumentation(origAppGetInitialProps);

    // Generally we can assume that `req` and `res` are always defined on the server:
    // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object
    // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher
    // span with each other when there are no req or res objects, we simply do not trace them at all here.
    if (hasTracingEnabled() && req && res) {
      var appGetInitialProps

 = await callTracedServerSideDataFetcher(errorWrappedAppGetInitialProps, appGetInitialPropsArguments, req, res, {
        dataFetcherRouteName: '/_app',
        requestedRouteName: context.ctx.pathname,
        dataFetchingMethodName: 'getInitialProps',
      });

      var requestTransaction = getTransactionFromRequest(req);
      if (requestTransaction) {
        appGetInitialProps.pageProps._sentryTraceData = requestTransaction.toTraceparent();

        var dynamicSamplingContext = requestTransaction.getDynamicSamplingContext();
        appGetInitialProps.pageProps._sentryBaggage =
          dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);
      }

      return appGetInitialProps;
    } else {
      return errorWrappedAppGetInitialProps(...appGetInitialPropsArguments);
    }
  };
}

export { withSentryServerSideAppGetInitialProps };
//# sourceMappingURL=withSentryServerSideAppGetInitialProps.js.map
