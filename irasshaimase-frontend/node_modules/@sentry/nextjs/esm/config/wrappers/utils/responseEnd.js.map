{"version":3,"file":"responseEnd.js","sources":["../../../../../src/config/wrappers/utils/responseEnd.ts"],"sourcesContent":["import { flush } from '@sentry/node';\nimport { Transaction } from '@sentry/types';\nimport { fill, logger } from '@sentry/utils';\nimport { ServerResponse } from 'http';\n\nimport { ResponseEndMethod, WrappedResponseEndMethod } from '../types';\n\n/**\n * Wrap `res.end()` so that it closes the transaction and flushes events before letting the request finish.\n *\n * Note: This wraps a sync method with an async method. While in general that's not a great idea in terms of keeping\n * things in the right order, in this case it's safe, because the native `.end()` actually *is* (effectively) async, and\n * its run actually *is* (literally) awaited, just manually so (which reflects the fact that the core of the\n * request/response code in Node by far predates the introduction of `async`/`await`). When `.end()` is done, it emits\n * the `prefinish` event, and only once that fires does request processing continue. See\n * https://github.com/nodejs/node/commit/7c9b607048f13741173d397795bac37707405ba7.\n *\n * Also note: `res.end()` isn't called until *after* all response data and headers have been sent, so blocking inside of\n * `end` doesn't delay data getting to the end user. See\n * https://nodejs.org/api/http.html#responseenddata-encoding-callback.\n *\n * @param transaction The transaction tracing request handling\n * @param res: The request's corresponding response\n */\nexport function autoEndTransactionOnResponseEnd(transaction: Transaction, res: ServerResponse): void {\n  const wrapEndMethod = (origEnd: ResponseEndMethod): WrappedResponseEndMethod => {\n    return async function sentryWrappedEnd(this: ServerResponse, ...args: unknown[]) {\n      await finishTransaction(transaction, this);\n      await flushQueue();\n\n      return origEnd.call(this, ...args);\n    };\n  };\n\n  // Prevent double-wrapping\n  if (!(res.end as WrappedResponseEndMethod).__sentry_original__) {\n    fill(res, 'end', wrapEndMethod);\n  }\n}\n\n/** Finish the given response's transaction and set HTTP status data */\nexport async function finishTransaction(transaction: Transaction | undefined, res: ServerResponse): Promise<void> {\n  if (transaction) {\n    transaction.setHttpStatus(res.statusCode);\n\n    // If any open spans are set to finish when the response ends, it sets up a race condition between their `finish`\n    // calls and the transaction's `finish` call - and any spans which lose the race will get dropped from the\n    // transaction. To prevent this, push `transaction.finish` to the next event loop so that it's guaranteed to lose\n    // the race, and wait for it to be done before flushing events.\n    const transactionFinished: Promise<void> = new Promise(resolve => {\n      setImmediate(() => {\n        transaction.finish();\n        resolve();\n      });\n    });\n    await transactionFinished;\n  }\n}\n\n/** Flush the event queue to ensure that events get sent to Sentry before the response is finished and the lambda ends */\nexport async function flushQueue(): Promise<void> {\n  try {\n    __DEBUG_BUILD__ && logger.log('Flushing events...');\n    await flush(2000);\n    __DEBUG_BUILD__ && logger.log('Done flushing events');\n  } catch (e) {\n    __DEBUG_BUILD__ && logger.log('Error while flushing events:\\n', e);\n  }\n}\n"],"names":[],"mappings":";;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;"}