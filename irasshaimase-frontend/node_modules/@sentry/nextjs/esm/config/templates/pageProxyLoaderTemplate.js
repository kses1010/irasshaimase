import * as wrapee from '__RESOURCE_PATH__';
export * from '__RESOURCE_PATH__';
import * as Sentry from '@sentry/nextjs';

/**
 * This file is a template for the code which will be substituted when our webpack loader handles non-API files in the
 * `pages/` directory.
 *
 * We use `__RESOURCE_PATH__` as a placeholder for the path to the file being wrapped. Because it's not a real package,
 * this causes both TS and ESLint to complain, hence the pragma comments below.
 */

var userPageModule = wrapee ;

var pageComponent = userPageModule.default;

var origGetInitialProps = pageComponent.getInitialProps;
var origGetStaticProps = userPageModule.getStaticProps;
var origGetServerSideProps = userPageModule.getServerSideProps;

var getInitialPropsWrappers = {
  '/_app': Sentry.withSentryServerSideAppGetInitialProps,
  '/_document': Sentry.withSentryServerSideDocumentGetInitialProps,
  '/_error': Sentry.withSentryServerSideErrorGetInitialProps,
};

var getInitialPropsWrapper = getInitialPropsWrappers['__ROUTE__'] || Sentry.withSentryServerSideGetInitialProps;

if (typeof origGetInitialProps === 'function') {
  pageComponent.getInitialProps = getInitialPropsWrapper(origGetInitialProps) ;
}

var getStaticProps =
  typeof origGetStaticProps === 'function'
    ? Sentry.withSentryGetStaticProps(origGetStaticProps, '__ROUTE__')
    : undefined;
var getServerSideProps =
  typeof origGetServerSideProps === 'function'
    ? Sentry.withSentryGetServerSideProps(origGetServerSideProps, '__ROUTE__')
    : undefined;

export { pageComponent as default, getServerSideProps, getStaticProps };
